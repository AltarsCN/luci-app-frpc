#!/bin/sh /etc/rc.common
# Copyright
# Init script for frpc (Fast Reverse Proxy Client)

START=95
STOP=10
USE_PROCD=1

NAME=frpc
PROG=/usr/bin/frpc
CONFIG_UCI=frpc
RUNTIME_DIR=/var/run/$NAME
TMP_CONFIG_TOML=$RUNTIME_DIR/$NAME.toml

# Helper: read a single option with default
uci_get() {
	local __v
	__v=$(uci -q get $CONFIG_UCI.$1.$2)
	[ -n "$__v" ] && echo "$__v" || echo "$3"
}

# Build TOML configuration from UCI
# UCI layout we expect:
# config conf 'common'  (global)
# config conf 'xxx'     (proxies)
# config init 'init'    (runtime flags)

gen_config() {
	# QUIC advanced
	local quic_keepalive_period quic_max_idle_timeout quic_max_incoming_streams
	quic_keepalive_period=$(uci_get common quic_keepalive_period "")
	quic_max_idle_timeout=$(uci_get common quic_max_idle_timeout "")
	quic_max_incoming_streams=$(uci_get common quic_max_incoming_streams "")
	# TCP mux keepalive
	local tcp_mux_keepalive_interval
	tcp_mux_keepalive_interval=$(uci_get common tcp_mux_keepalive_interval "")
	# TLS advanced
	local tls_cert_file tls_key_file tls_trusted_ca_file tls_server_name tls_disable_custom_first_byte
	tls_cert_file=$(uci_get common tls_cert_file "")
	tls_key_file=$(uci_get common tls_key_file "")
	tls_trusted_ca_file=$(uci_get common tls_trusted_ca_file "")
	tls_server_name=$(uci_get common tls_server_name "")
	tls_disable_custom_first_byte=$(uci_get common tls_disable_custom_first_byte "")
	mkdir -p "$RUNTIME_DIR"
	local common_section init_section

	# We'll parse UCI directly using uci show & awk for flexibility
	# Read global
	local server_addr server_port protocol auth_method token log_level log_file log_max_days user tcp_mux heartbeat_interval heartbeat_timeout http_proxy tls_enable
	server_addr=$(uci_get common server_addr "127.0.0.1")
	server_port=$(uci_get common server_port "7000")
	protocol=$(uci_get common protocol "tcp")
	auth_method=$(uci_get common auth_method "token")
	token=$(uci_get common token "")
	# OIDC fields
	local oidc_client_id oidc_client_secret oidc_audience oidc_token_endpoint_url
	oidc_client_id=$(uci_get common oidc_client_id "")
	oidc_client_secret=$(uci_get common oidc_client_secret "")
	oidc_audience=$(uci_get common oidc_audience "")
	oidc_token_endpoint_url=$(uci_get common oidc_token_endpoint_url "")
	log_level=$(uci_get common log_level "info")
	log_file=$(uci_get common log_file "")
	log_max_days=$(uci_get common log_max_days "3")
	user=$(uci_get common user "")
	tcp_mux=$(uci_get common tcp_mux "1")
	heartbeat_interval=$(uci_get common heartbeat_interval "")
	heartbeat_timeout=$(uci_get common heartbeat_timeout "")
	http_proxy=$(uci_get common http_proxy "")
	tls_enable=$(uci_get common tls_enable "")

	# Admin interface
	local admin_addr admin_port admin_user admin_pwd assets_dir login_fail_exit disable_log_color
	admin_addr=$(uci_get common admin_addr "")
	admin_port=$(uci_get common admin_port "")
	admin_user=$(uci_get common admin_user "")
	admin_pwd=$(uci_get common admin_pwd "")
	assets_dir=$(uci_get common assets_dir "")
	login_fail_exit=$(uci_get common login_fail_exit "")
	disable_log_color=$(uci_get common disable_log_color "")

	# Write TOML
		echo "# Generated at $(date +%Y-%m-%d_%H:%M:%S)" > "$TMP_CONFIG_TOML.tmp"
	{
		[ "$log_file" = "" ] || echo "log.file = \"$log_file\""
		[ "$log_level" = "" ] || echo "log.level = \"$log_level\""
		[ "$log_max_days" = "" ] || echo "log.maxDays = $log_max_days"
		[ "$disable_log_color" = "" ] || echo "log.disableColor = $( [ "$disable_log_color" = 1 ] && echo true || echo false )"

		echo "serverAddr = \"$server_addr\""
		echo "serverPort = $server_port"
		[ "$protocol" = "" ] || echo "transport.protocol = \"$protocol\""
		[ "$tcp_mux_keepalive_interval" = "" ] || echo "transport.tcpMuxKeepaliveInterval = $tcp_mux_keepalive_interval"
		[ "$tcp_mux" = "" ] || echo "transport.tcpMux = $( [ "$tcp_mux" = 1 ] && echo true || echo false )"
		[ "$tls_enable" = "" ] || echo "transport.tls.enable = $( [ "$tls_enable" = 1 ] && echo true || echo false )"
		[ "$heartbeat_interval" = "" ] && [ "$heartbeat_timeout" = "" ] || {
			[ "$heartbeat_interval" = "" ] || echo "transport.heartbeatInterval = $heartbeat_interval"
			[ "$heartbeat_timeout" = "" ] || echo "transport.heartbeatTimeout = $heartbeat_timeout"
		}

		if [ "$auth_method" = "oidc" ]; then
			# Minimal required fields: clientID, clientSecret, audience, tokenEndpointURL
			[ -n "$oidc_client_id" ] && echo "auth.method = \"oidc\""
			[ -n "$oidc_client_id" ] && echo "auth.oidc.clientID = \"$oidc_client_id\""
			[ -n "$oidc_client_secret" ] && echo "auth.oidc.clientSecret = \"$oidc_client_secret\""
			[ -n "$oidc_audience" ] && echo "auth.oidc.audience = \"$oidc_audience\""
			[ -n "$oidc_token_endpoint_url" ] && echo "auth.oidc.tokenEndpointURL = \"$oidc_token_endpoint_url\""
		else
			[ "$token" = "" ] || {
				echo "auth.method = \"token\""
				echo "auth.token = \"$token\""
			}
		fi
		[ "$user" = "" ] || echo "user = \"$user\""
		[ "$http_proxy" = "" ] || echo "transport.proxyURL = \"$http_proxy\""
		[ "$login_fail_exit" = "" ] || echo "loginFailExit = $( [ "$login_fail_exit" = 1 ] && echo true || echo false )"
		[ "$admin_addr" = "" ] || [ "$admin_port" = "" ] || {
			echo "webServer.addr = \"$admin_addr\""
			echo "webServer.port = $admin_port"
			[ "$admin_user" = "" ] || echo "webServer.user = \"$admin_user\""
			[ "$admin_pwd" = "" ] || echo "webServer.password = \"$admin_pwd\""
			[ "$assets_dir" = "" ] || echo "webServer.assetsDir = \"$assets_dir\""
		}

		# Proxies: iterate sections named 'conf' excluding 'common'
		# Additional settings (common._ list) dynamic injection
		local _added_keys
		_added_keys=""
		uci -q show frpc.common | sed -n "s/^frpc.common._='\(.*\)'/\1/p" | while read -r kv; do
			[ -z "$kv" ] && continue
			case "$kv" in
				*=*) key="${kv%%=*}" ; value="${kv#*=}" ;;
				*) continue ;;
			esac
			# Skip duplicates of earlier explicit keys
			if echo "$_added_keys" | grep -qw "$key" ; then
				continue
			fi
			_added_keys="$_added_keys $key"
			echo "$key = $value"
		done
		uci -q show $CONFIG_UCI | grep "=conf" | cut -d'.' -f2 | cut -d'=' -f1 | while read -r sec; do
			[ "$sec" = "common" ] && continue
			local type name local_ip local_port remote_port use_encryption use_compression role server_name sk custom_domains subdomain locations http_user http_pwd host_header_rewrite plugin plugin_http_user plugin_http_passwd plugin_user plugin_passwd plugin_unix_path
			type=$(uci -q get $CONFIG_UCI.$sec.type)
			name=$(uci -q get $CONFIG_UCI.$sec.name)
			[ -z "$name" ] && continue
			[ -z "$type" ] && type="tcp"
			local_ip=$(uci -q get $CONFIG_UCI.$sec.local_ip)
			local_port=$(uci -q get $CONFIG_UCI.$sec.local_port)
			remote_port=$(uci -q get $CONFIG_UCI.$sec.remote_port)
			use_encryption=$(uci -q get $CONFIG_UCI.$sec.use_encryption)
			use_compression=$(uci -q get $CONFIG_UCI.$sec.use_compression)
			role=$(uci -q get $CONFIG_UCI.$sec.role)
			server_name=$(uci -q get $CONFIG_UCI.$sec.server_name)
			sk=$(uci -q get $CONFIG_UCI.$sec.sk)
			custom_domains=$(uci -q get $CONFIG_UCI.$sec.custom_domains)
			subdomain=$(uci -q get $CONFIG_UCI.$sec.subdomain)
			locations=$(uci -q get $CONFIG_UCI.$sec.locations)
			http_user=$(uci -q get $CONFIG_UCI.$sec.http_user)
			http_pwd=$(uci -q get $CONFIG_UCI.$sec.http_pwd)
			host_header_rewrite=$(uci -q get $CONFIG_UCI.$sec.host_header_rewrite)
			plugin=$(uci -q get $CONFIG_UCI.$sec.plugin)
			plugin_http_user=$(uci -q get $CONFIG_UCI.$sec.plugin_http_user)
			plugin_http_passwd=$(uci -q get $CONFIG_UCI.$sec.plugin_http_passwd)
			plugin_user=$(uci -q get $CONFIG_UCI.$sec.plugin_user)
			plugin_passwd=$(uci -q get $CONFIG_UCI.$sec.plugin_passwd)
			plugin_unix_path=$(uci -q get $CONFIG_UCI.$sec.plugin_unix_path)

			echo "[[proxies]]"
			echo "name = \"$name\""
			echo "type = \"$type\""
			[ -n "$local_ip" ] && echo "localIP = \"$local_ip\""
			[ -n "$local_port" ] && echo "localPort = $local_port"
			[ -n "$remote_port" ] && [ "$remote_port" != '#' ] && echo "remotePort = $remote_port"
			[ "$use_encryption" = 1 ] && echo "transport.useEncryption = true"
			[ "$use_compression" = 1 ] && echo "transport.useCompression = true"
			[ -n "$role" ] && echo "role = \"$role\""
			[ -n "$server_name" ] && echo "serverName = \"$server_name\""
			[ -n "$sk" ] && echo "secretKey = \"$sk\""
			[ -n "$custom_domains" ] && echo "customDomains = [\"$custom_domains\"]"
			[ -n "$subdomain" ] && echo "subdomain = \"$subdomain\""
			[ -n "$locations" ] && echo "locations = [\"$locations\"]"
			[ -n "$http_user" ] && echo "httpUser = \"$http_user\""
			[ -n "$http_pwd" ] && echo "httpPassword = \"$http_pwd\""
			[ -n "$host_header_rewrite" ] && echo "hostHeaderRewrite = \"$host_header_rewrite\""
			if [ -n "$plugin" ]; then
				echo "[proxies.plugin]"
				echo "type = \"$plugin\""
				[ -n "$plugin_http_user" ] && echo "httpUser = \"$plugin_http_user\""
				[ -n "$plugin_http_passwd" ] && echo "httpPassword = \"$plugin_http_passwd\""
				[ -n "$plugin_user" ] && echo "user = \"$plugin_user\""
				[ -n "$plugin_passwd" ] && echo "passwd = \"$plugin_passwd\""
				[ -n "$plugin_unix_path" ] && echo "unixPath = \"$plugin_unix_path\""
			fi
			# End proxy section
			echo
		done
	} > "$TMP_CONFIG_TOML"
}

start_service() {
	local enabled
	enabled=$(uci_get init enabled 0)
	[ "$enabled" = "1" ] || { echo "frpc: disabled in UCI (init.enabled != 1)"; return 0; }

	[ -x "$PROG" ] || { echo "frpc: binary $PROG not found or not executable"; return 1; }
	gen_config || return 1

	# init section runtime parameters
	local run_user run_group stdout_flag stderr_flag respawn_flag
	run_user=$(uci_get init user "")
	run_group=$(uci_get init group "")
	stdout_flag=$(uci_get init stdout 1)
	stderr_flag=$(uci_get init stderr 1)
	respawn_flag=$(uci_get init respawn 1)

	procd_open_instance
	procd_set_param command "$PROG" -c "$TMP_CONFIG_TOML"
	[ "$respawn_flag" = "1" ] && procd_set_param respawn 300 5 5
	[ "$stdout_flag" = "1" ] && procd_set_param stdout 1
	[ "$stderr_flag" = "1" ] && procd_set_param stderr 1
	[ -n "$run_user" ] && procd_set_param user "$run_user"
	[ -n "$run_group" ] && procd_set_param group "$run_group"

	# Export env vars (DynamicList env on init section)
	uci -q show frpc.init | sed -n "s/^frpc.init.env='\(.*\)'/\1/p" | while read -r envline; do
		[ -z "$envline" ] && continue
		case "$envline" in *'='*) procd_set_param env "$envline" ;; esac
	done
	procd_close_instance
}

stop_service() {
	# procd handles kill, we just cleanup temp file
	[ -f "$TMP_CONFIG_TOML" ] && rm -f "$TMP_CONFIG_TOML"
}

reload_service() {
	stop
	start
}
